<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Title</title>
</head>
<body>
<style>
  input {
    padding: 8px;
  }

  label {
    display: flex;
    flex-direction: column;
    margin-top: 8px;
  }

  button {
    background: brown;
    color: white;
    border: none;
    outline: none;
    padding: 8px;
    margin-top: 8px;
    width: 100%;
    cursor: pointer;
  }

  form {
    max-width: 400px;
    margin: auto;
    padding: 20px;
  }

  small {
    background: #93e693;
    padding: 10px;
    max-width: 400px;
    margin: 10px auto;
    display: block;
    color: black;
    font-weight: bold;
    text-align: center;

  }
</style>
{{#if message }}
  <small>
    {{message}}
  </small>
{{/if}}
{{> forms }}
<script>
  const makeCallForm = document.getElementById("makeCallExistingClient");
  const makeCallNotExistingForm = document.getElementById("makeCallNotExistingClient");
  const pauseOperatorForm = document.getElementById("pauseForm");
  const unpauseOperatorForm = document.getElementById("unpauseForm");
  const endCallFrom = document.getElementById("endCallFrom");

  const fetchData = (url, payload) => fetch(url, {
    method: 'POST',
    body: JSON.stringify(payload),
    headers: {
      'Content-Type': 'application/json'
    }
  }).then(r=> {
    console.log(r);
    return r
  }).catch(e=> {
    console.log(e);
    return e
  })

  const formDataToJson = (form) => {
    const data = new FormData(form);
    const payload = {}

    for (const [name,value] of data) {
      payload[name] = value
    }
    return payload
  }

  function makeCall(existingClient, form) {
    return (e) => {
      e.preventDefault();
      const data = formDataToJson(form);
      fetchData(`/call/${data.card}/start`, { ...data, existingClient })
    };
  }

  function endCall(form) {
    return (e) => {
      e.preventDefault();
      const { card } = formDataToJson(form);
      fetchData(`/call/${card}/end`, {  })
    };
  }

  function pauseOperator(form) {
    return (e) => {
      e.preventDefault();
      const { operator } = formDataToJson(form);
      fetchData(`/operator/${operator}/pause`)
    };
  }

  function unpauseOperator(form) {
    return (e) => {
      e.preventDefault();
      const { operator } = formDataToJson(form);
      fetchData(`/operator/${operator}/unpause`)
    };
  }

  makeCallForm.addEventListener("submit", makeCall(true, makeCallForm));
  makeCallNotExistingForm.addEventListener("submit", makeCall(false, makeCallNotExistingForm));
  pauseOperatorForm.addEventListener('submit', pauseOperator(pauseOperatorForm))
  unpauseOperatorForm.addEventListener('submit', unpauseOperator(unpauseOperatorForm))
  endCallFrom.addEventListener('submit', endCall(endCallFrom))
</script>
</body>
</html>